/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./src/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntFilter'] | null; // NestedIntFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedIntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntFilter'] | null; // NestedIntFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedStringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  SheetOrderByInput: { // input type
    id?: NexusGenEnums['SortOrder'] | null; // SortOrder
    points?: NexusGenEnums['SortOrder'] | null; // SortOrder
    title?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  SheetWhereInput: { // input type
    AND?: NexusGenInputs['SheetWhereInput'][] | null; // [SheetWhereInput!]
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['SheetWhereInput'][] | null; // [SheetWhereInput!]
    OR?: NexusGenInputs['SheetWhereInput'][] | null; // [SheetWhereInput!]
    points?: NexusGenInputs['IntFilter'] | null; // IntFilter
    title?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  SheetWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    mode?: NexusGenEnums['QueryMode'] | null; // QueryMode
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
}

export interface NexusGenEnums {
  QueryMode: "default" | "insensitive"
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Query: {};
  Sheet: { // root type
    id: number; // Int!
    points: number; // Int!
    title: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  IntFilter: NexusGenInputs['IntFilter'];
  NestedIntFilter: NexusGenInputs['NestedIntFilter'];
  NestedStringFilter: NexusGenInputs['NestedStringFilter'];
  SheetOrderByInput: NexusGenInputs['SheetOrderByInput'];
  SheetWhereInput: NexusGenInputs['SheetWhereInput'];
  SheetWhereUniqueInput: NexusGenInputs['SheetWhereUniqueInput'];
  StringFilter: NexusGenInputs['StringFilter'];
  QueryMode: NexusGenEnums['QueryMode'];
  SortOrder: NexusGenEnums['SortOrder'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Query: { // field return type
    sheet: NexusGenRootTypes['Sheet'] | null; // Sheet
    sheets: NexusGenRootTypes['Sheet'][]; // [Sheet!]!
  }
  Sheet: { // field return type
    id: number; // Int!
    points: number; // Int!
    title: string; // String!
  }
}

export interface NexusGenArgTypes {
  Query: {
    sheet: { // args
      where: NexusGenInputs['SheetWhereUniqueInput']; // SheetWhereUniqueInput!
    }
    sheets: { // args
      after?: NexusGenInputs['SheetWhereUniqueInput'] | null; // SheetWhereUniqueInput
      before?: NexusGenInputs['SheetWhereUniqueInput'] | null; // SheetWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['SheetOrderByInput'][] | null; // [SheetOrderByInput!]
      where?: NexusGenInputs['SheetWhereInput'] | null; // SheetWhereInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Query" | "Sheet";

export type NexusGenInputNames = "IntFilter" | "NestedIntFilter" | "NestedStringFilter" | "SheetOrderByInput" | "SheetWhereInput" | "SheetWhereUniqueInput" | "StringFilter";

export type NexusGenEnumNames = "QueryMode" | "SortOrder";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}